name: Deploy to Windows Server

on:
  push:
    branches:
      - develop
      - testing
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set environment variable based on branch
      - name: Set environment
        id: env
        run: |
          if [[ "${GITHUB_REF##*/}" == "develop" ]]; then
            echo "ENV=development" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "testing" ]]; then
            echo "ENV=testing" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
          fi

      # Step 3: Install WinSCP with enhanced debugging
      - name: Install WinSCP
        run: |
          echo "Installing dependencies..."
          sudo apt-get update
          sudo apt-get install -y wget unzip
          echo "Downloading WinSCP..."
          wget --tries=3 --timeout=30 https://winscp.net/download/WinSCP-6.3.5-Automation.zip -O WinSCP.zip || { echo "Failed to download WinSCP"; exit 1; }
          echo "Verifying WinSCP.zip..."
          if [ ! -f WinSCP.zip ]; then
            echo "WinSCP.zip not found"
            exit 1
          fi
          echo "Checking WinSCP.zip integrity..."
          unzip -t WinSCP.zip || { echo "WinSCP.zip is corrupted"; exit 1; }
          echo "Unzipping WinSCP..."
          unzip WinSCP.zip -d WinSCP || { echo "Failed to unzip WinSCP"; exit 1; }
          echo "Listing WinSCP directory contents..."
          ls -laR WinSCP/
          echo "Searching for WinSCP.com..."
          WINSCP_PATH=$(find WinSCP -name WinSCP.com -type f)
          if [ -z "$WINSCP_PATH" ]; then
            echo "WinSCP.com not found in WinSCP directory"
            exit 1
          fi
          echo "WinSCP.com found at: $WINSCP_PATH"
          chmod +x "$WINSCP_PATH"
          echo "Verifying WinSCP.com..."
          "$WINSCP_PATH" /version || { echo "WinSCP.com is not executable"; exit 1; }
          echo "WINSCP_PATH=$WINSCP_PATH" >> $GITHUB_ENV

      # Step 4: Upload Backend & Frontend using WinSCP
      - name: Upload files via WinSCP
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files in working directory:"
          ls -la
          echo "Using WinSCP at: ${{ env.WINSCP_PATH }}"
          "${{ env.WINSCP_PATH }}" /command \
            "open sftp://${{ secrets.SERVER_USER_PSBA_TICKETING }}:${{ secrets.SERVER_PASSWORD_PSBA_TICKETING }}@${{ secrets.SERVER_HOST_PSBA_TICKETING }}:22 -hostkey=*" \
            "option batch abort" \
            "option confirm off" \
            "put -delete ./Ticketing-Management-System-Backend/* ${{ secrets.DEST_BASE_PSBA_TICKETING }}/${{ env.ENV }}/psba-ticket-management-portal/Backend/" \
            "put -delete ./Ticketing-Management-System-Frontend/* ${{ secrets.DEST_BASE_PSBA_TICKETING }}/${{ env.ENV }}/psba-ticket-management-portal/Frontend/" \
            "exit" || { echo "SFTP upload failed"; exit 1; }

      # Step 5: Run remote PowerShell deploy script
      - name: Run remote PowerShell deploy script
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST_PSBA_TICKETING }}
          username: ${{ secrets.SERVER_USER_PSBA_TICKETING }}
          password: ${{ secrets.SERVER_PASSWORD_PSBA_TICKETING }}
          port: 22
          script: |
            powershell -NoProfile -ExecutionPolicy Bypass -File "${{ secrets.DEST_BASE_PSBA_TICKETING }}\deploy_scripts\deploy.ps1" -env ${{ env.ENV }}
        continue-on-error: false